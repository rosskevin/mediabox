version: "3.3"

networks:
  web:
    external: false

services:
  traefik:
    image: traefik
    restart: always
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080 # dashboard UI (enabled by --api.insecure=true)
    command:
      - --api.dashboard=true
      - --api.debug=false      
      - --api.insecure=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${COMPOSE_PROJECT_NAME}_web

      # Entrypoints for HTTP, HTTPS, and NX (TCP + UDP)
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443

      # Letsencrypt - wildcard certificates can only be generated through a DNS-01 challenge.
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.email=${SSL_ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=etc/traefik/acme/acme.json
      # enable the following staging server initially to test successful issuance of certificates (and avoid being rate limited due to errors)
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONTAINERS}/traefik/acme:/etc/traefik/acme
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.api.service=api@internal
      # define reusable middlewares
      - traefik.http.middlewares.internalwhitelist.ipwhitelist.sourcerange=${IP_WHITELISTE_SOURCERANGE}  

  # sample for verification of traefik, routing, etc.
  whoami:
    image: traefik/whoami
    restart: always
    container_name: whoami
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.tls.certresolver=myresolver
